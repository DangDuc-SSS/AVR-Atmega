
Day2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b05  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  00000ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b5  00000000  00000000  00001561  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000361  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000068c  00000000  00000000  00001e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000024e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  64:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_cmd>:
	else if(x==1 && y<16)
	{
		LCD_cmd((y & 0x0f)| 0xC0);
	}
	LCD_string(data);
}
  6c:	92 b3       	in	r25, 0x12	; 18
  6e:	90 7f       	andi	r25, 0xF0	; 240
  70:	28 2f       	mov	r18, r24
  72:	22 95       	swap	r18
  74:	2f 70       	andi	r18, 0x0F	; 15
  76:	92 2b       	or	r25, r18
  78:	92 bb       	out	0x12, r25	; 18
  7a:	a8 98       	cbi	0x15, 0	; 21
  7c:	a9 98       	cbi	0x15, 1	; 21
  7e:	aa 9a       	sbi	0x15, 2	; 21
  80:	ef ec       	ldi	r30, 0xCF	; 207
  82:	f7 e0       	ldi	r31, 0x07	; 7
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <LCD_cmd+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <LCD_cmd+0x1e>
  8a:	00 00       	nop
  8c:	aa 98       	cbi	0x15, 2	; 21
  8e:	ef ec       	ldi	r30, 0xCF	; 207
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_cmd+0x26>
  96:	00 c0       	rjmp	.+0      	; 0x98 <LCD_cmd+0x2c>
  98:	00 00       	nop
  9a:	92 b3       	in	r25, 0x12	; 18
  9c:	90 7f       	andi	r25, 0xF0	; 240
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	89 2b       	or	r24, r25
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	a8 98       	cbi	0x15, 0	; 21
  a6:	a9 98       	cbi	0x15, 1	; 21
  a8:	aa 9a       	sbi	0x15, 2	; 21
  aa:	8f ec       	ldi	r24, 0xCF	; 207
  ac:	97 e0       	ldi	r25, 0x07	; 7
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_cmd+0x42>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCD_cmd+0x48>
  b4:	00 00       	nop
  b6:	aa 98       	cbi	0x15, 2	; 21
  b8:	ef ec       	ldi	r30, 0xCF	; 207
  ba:	f7 e0       	ldi	r31, 0x07	; 7
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_cmd+0x50>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_cmd+0x56>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <LCD_data>:
  c6:	12 ba       	out	0x12, r1	; 18
  c8:	92 b3       	in	r25, 0x12	; 18
  ca:	28 2f       	mov	r18, r24
  cc:	22 95       	swap	r18
  ce:	2f 70       	andi	r18, 0x0F	; 15
  d0:	92 2b       	or	r25, r18
  d2:	92 bb       	out	0x12, r25	; 18
  d4:	a8 9a       	sbi	0x15, 0	; 21
  d6:	a9 98       	cbi	0x15, 1	; 21
  d8:	aa 9a       	sbi	0x15, 2	; 21
  da:	ef ec       	ldi	r30, 0xCF	; 207
  dc:	f7 e0       	ldi	r31, 0x07	; 7
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_data+0x18>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_data+0x1e>
  e4:	00 00       	nop
  e6:	aa 98       	cbi	0x15, 2	; 21
  e8:	ef ec       	ldi	r30, 0xCF	; 207
  ea:	f7 e0       	ldi	r31, 0x07	; 7
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_data+0x26>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <LCD_data+0x2c>
  f2:	00 00       	nop
  f4:	12 ba       	out	0x12, r1	; 18
  f6:	92 b3       	in	r25, 0x12	; 18
  f8:	8f 70       	andi	r24, 0x0F	; 15
  fa:	89 2b       	or	r24, r25
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	a8 9a       	sbi	0x15, 0	; 21
 100:	a9 98       	cbi	0x15, 1	; 21
 102:	aa 9a       	sbi	0x15, 2	; 21
 104:	8f ec       	ldi	r24, 0xCF	; 207
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_data+0x42>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_data+0x48>
 10e:	00 00       	nop
 110:	aa 98       	cbi	0x15, 2	; 21
 112:	ef ec       	ldi	r30, 0xCF	; 207
 114:	f7 e0       	ldi	r31, 0x07	; 7
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_data+0x50>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_data+0x56>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <LCD_Init>:
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	81 bb       	out	0x11, r24	; 17
 124:	84 bb       	out	0x14, r24	; 20
 126:	8f e3       	ldi	r24, 0x3F	; 63
 128:	9c e9       	ldi	r25, 0x9C	; 156
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Init+0xa>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Init+0x10>
 130:	00 00       	nop
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
 138:	88 e2       	ldi	r24, 0x28	; 40
 13a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
 13e:	8c e0       	ldi	r24, 0x0C	; 12
 140:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
 150:	08 95       	ret

00000152 <LCD_string>:
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	88 81       	ld	r24, Y
 15a:	88 23       	and	r24, r24
 15c:	31 f0       	breq	.+12     	; 0x16a <LCD_string+0x18>
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_data>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <LCD_string+0xe>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <INT_str>:
void INT_str(int number,char *mang)
{
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	9c 01       	movw	r18, r24
 17e:	8b 01       	movw	r16, r22
	int a =number;
	uint8_t count=0;
	while(a)
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	09 f1       	breq	.+66     	; 0x1c6 <INT_str+0x56>
 184:	40 e0       	ldi	r20, 0x00	; 0
	{
		a/=10;
 186:	ea e0       	ldi	r30, 0x0A	; 10
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	bf 01       	movw	r22, r30
 18c:	0e 94 26 01 	call	0x24c	; 0x24c <__divmodhi4>
 190:	cb 01       	movw	r24, r22
		count++;
 192:	4f 5f       	subi	r20, 0xFF	; 255
}
void INT_str(int number,char *mang)
{
	int a =number;
	uint8_t count=0;
	while(a)
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	c9 f7       	brne	.-14     	; 0x18a <INT_str+0x1a>
	{
		a/=10;
		count++;
	}
	uint8_t i = 0;
	for(i = 0; i < count; i++)
 198:	44 23       	and	r20, r20
 19a:	b1 f0       	breq	.+44     	; 0x1c8 <INT_str+0x58>
 19c:	e8 01       	movw	r28, r16
 19e:	c4 0f       	add	r28, r20
 1a0:	d1 1d       	adc	r29, r1
 1a2:	e0 e0       	ldi	r30, 0x00	; 0
	{
		mang[count-i-1] = (char)(number%10) +'0';
 1a4:	0f 2e       	mov	r0, r31
 1a6:	fa e0       	ldi	r31, 0x0A	; 10
 1a8:	ef 2e       	mov	r14, r31
 1aa:	f1 2c       	mov	r15, r1
 1ac:	f0 2d       	mov	r31, r0
 1ae:	c9 01       	movw	r24, r18
 1b0:	b7 01       	movw	r22, r14
 1b2:	0e 94 26 01 	call	0x24c	; 0x24c <__divmodhi4>
 1b6:	80 5d       	subi	r24, 0xD0	; 208
 1b8:	8a 93       	st	-Y, r24
		number/= 10;
 1ba:	26 2f       	mov	r18, r22
 1bc:	37 2f       	mov	r19, r23
	{
		a/=10;
		count++;
	}
	uint8_t i = 0;
	for(i = 0; i < count; i++)
 1be:	ef 5f       	subi	r30, 0xFF	; 255
 1c0:	4e 13       	cpse	r20, r30
 1c2:	f5 cf       	rjmp	.-22     	; 0x1ae <INT_str+0x3e>
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <INT_str+0x58>
	LCD_string(data);
}
void INT_str(int number,char *mang)
{
	int a =number;
	uint8_t count=0;
 1c6:	40 e0       	ldi	r20, 0x00	; 0
	for(i = 0; i < count; i++)
	{
		mang[count-i-1] = (char)(number%10) +'0';
		number/= 10;
	}
	mang[count]=' ';
 1c8:	f8 01       	movw	r30, r16
 1ca:	e4 0f       	add	r30, r20
 1cc:	f1 1d       	adc	r31, r1
 1ce:	80 e2       	ldi	r24, 0x20	; 32
 1d0:	80 83       	st	Z, r24
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	08 95       	ret

000001e0 <ADC_Init>:
int ADC_Init(char mux)
{
	
	ADMUX |= mux;
 1e0:	97 b1       	in	r25, 0x07	; 7
 1e2:	89 2b       	or	r24, r25
 1e4:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1<<ADSC);
 1e6:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADIF)));
 1e8:	34 9b       	sbis	0x06, 4	; 6
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <ADC_Init+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	8f e1       	ldi	r24, 0x1F	; 31
 1ee:	9e e4       	ldi	r25, 0x4E	; 78
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <ADC_Init+0x10>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <ADC_Init+0x16>
 1f6:	00 00       	nop
	_delay_ms(10);
	return ADCW;
 1f8:	84 b1       	in	r24, 0x04	; 4
 1fa:	95 b1       	in	r25, 0x05	; 5
}
 1fc:	08 95       	ret

000001fe <main>:
int main(void)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	29 97       	sbiw	r28, 0x09	; 9
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	LCD_Init();
 212:	0e 94 90 00 	call	0x120	; 0x120 <LCD_Init>
	DDRA = 0x00;
 216:	1a ba       	out	0x1a, r1	; 26
	ADCSRA |= (1 << ADEN)|(1 << ADIF)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 218:	86 b1       	in	r24, 0x06	; 6
 21a:	87 69       	ori	r24, 0x97	; 151
 21c:	86 b9       	out	0x06, r24	; 6
	char mang[9]={'\0'};
 21e:	fe 01       	movw	r30, r28
 220:	31 96       	adiw	r30, 0x01	; 1
 222:	89 e0       	ldi	r24, 0x09	; 9
 224:	df 01       	movw	r26, r30
 226:	1d 92       	st	X+, r1
 228:	8a 95       	dec	r24
 22a:	e9 f7       	brne	.-6      	; 0x226 <main+0x28>
	
    while (1) 
    {
		int i = ADC_Init(0);
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ADC_Init>
		INT_str(i,mang);
 232:	be 01       	movw	r22, r28
 234:	6f 5f       	subi	r22, 0xFF	; 255
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	0e 94 b8 00 	call	0x170	; 0x170 <INT_str>
	{
		LCD_cmd((y & 0x0f)| 0x80);
	}
	else if(x==1 && y<16)
	{
		LCD_cmd((y & 0x0f)| 0xC0);
 23c:	81 ec       	ldi	r24, 0xC1	; 193
 23e:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
	}
	LCD_string(data);
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_string>
 24a:	f0 cf       	rjmp	.-32     	; 0x22c <main+0x2e>

0000024c <__divmodhi4>:
 24c:	97 fb       	bst	r25, 7
 24e:	07 2e       	mov	r0, r23
 250:	16 f4       	brtc	.+4      	; 0x256 <__divmodhi4+0xa>
 252:	00 94       	com	r0
 254:	07 d0       	rcall	.+14     	; 0x264 <__divmodhi4_neg1>
 256:	77 fd       	sbrc	r23, 7
 258:	09 d0       	rcall	.+18     	; 0x26c <__divmodhi4_neg2>
 25a:	0e 94 3a 01 	call	0x274	; 0x274 <__udivmodhi4>
 25e:	07 fc       	sbrc	r0, 7
 260:	05 d0       	rcall	.+10     	; 0x26c <__divmodhi4_neg2>
 262:	3e f4       	brtc	.+14     	; 0x272 <__divmodhi4_exit>

00000264 <__divmodhi4_neg1>:
 264:	90 95       	com	r25
 266:	81 95       	neg	r24
 268:	9f 4f       	sbci	r25, 0xFF	; 255
 26a:	08 95       	ret

0000026c <__divmodhi4_neg2>:
 26c:	70 95       	com	r23
 26e:	61 95       	neg	r22
 270:	7f 4f       	sbci	r23, 0xFF	; 255

00000272 <__divmodhi4_exit>:
 272:	08 95       	ret

00000274 <__udivmodhi4>:
 274:	aa 1b       	sub	r26, r26
 276:	bb 1b       	sub	r27, r27
 278:	51 e1       	ldi	r21, 0x11	; 17
 27a:	07 c0       	rjmp	.+14     	; 0x28a <__udivmodhi4_ep>

0000027c <__udivmodhi4_loop>:
 27c:	aa 1f       	adc	r26, r26
 27e:	bb 1f       	adc	r27, r27
 280:	a6 17       	cp	r26, r22
 282:	b7 07       	cpc	r27, r23
 284:	10 f0       	brcs	.+4      	; 0x28a <__udivmodhi4_ep>
 286:	a6 1b       	sub	r26, r22
 288:	b7 0b       	sbc	r27, r23

0000028a <__udivmodhi4_ep>:
 28a:	88 1f       	adc	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	5a 95       	dec	r21
 290:	a9 f7       	brne	.-22     	; 0x27c <__udivmodhi4_loop>
 292:	80 95       	com	r24
 294:	90 95       	com	r25
 296:	bc 01       	movw	r22, r24
 298:	cd 01       	movw	r24, r26
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
