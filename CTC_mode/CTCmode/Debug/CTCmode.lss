
CTCmode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000096  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056d  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f7  00000000  00000000  000006e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000207  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b6  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
				//Normal();
			//}
		//}
int main ( )
{
	DDRB |= (1<<3);		/*PB3 (OC0) as output */
  6c:	bb 9a       	sbi	0x17, 3	; 23
	while (1)
	{
		OCR0 = 69;
  6e:	45 e4       	ldi	r20, 0x45	; 69
		TCCR0 = 0x39;	/* CTC, set on match, no prescaler */
  70:	39 e3       	ldi	r19, 0x39	; 57
		while ((TIFR&(1<<OCF0)) == 0);  /* monitor OCF0 flag */
		TIFR = (1<<OCF0);/* Clear OCF0 by writing 1 */
  72:	82 e0       	ldi	r24, 0x02	; 2
		OCR0 = 99;
  74:	23 e6       	ldi	r18, 0x63	; 99
		TCCR0 = 0x29;	/* CTC, clear on match, no prescaler */
  76:	99 e2       	ldi	r25, 0x29	; 41
int main ( )
{
	DDRB |= (1<<3);		/*PB3 (OC0) as output */
	while (1)
	{
		OCR0 = 69;
  78:	4c bf       	out	0x3c, r20	; 60
		TCCR0 = 0x39;	/* CTC, set on match, no prescaler */
  7a:	33 bf       	out	0x33, r19	; 51
		while ((TIFR&(1<<OCF0)) == 0);  /* monitor OCF0 flag */
  7c:	08 b6       	in	r0, 0x38	; 56
  7e:	01 fe       	sbrs	r0, 1
  80:	fd cf       	rjmp	.-6      	; 0x7c <main+0x10>
		TIFR = (1<<OCF0);/* Clear OCF0 by writing 1 */
  82:	88 bf       	out	0x38, r24	; 56
		OCR0 = 99;
  84:	2c bf       	out	0x3c, r18	; 60
		TCCR0 = 0x29;	/* CTC, clear on match, no prescaler */
  86:	93 bf       	out	0x33, r25	; 51
		while ((TIFR&(1<<OCF0)) == 0);
  88:	08 b6       	in	r0, 0x38	; 56
  8a:	01 fe       	sbrs	r0, 1
  8c:	fd cf       	rjmp	.-6      	; 0x88 <main+0x1c>
		TIFR = (1<<OCF0);/* Clear OCF0 by writing 1 */
  8e:	88 bf       	out	0x38, r24	; 56
	}
  90:	f3 cf       	rjmp	.-26     	; 0x78 <main+0xc>

00000092 <_exit>:
  92:	f8 94       	cli

00000094 <__stop_program>:
  94:	ff cf       	rjmp	.-2      	; 0x94 <__stop_program>
