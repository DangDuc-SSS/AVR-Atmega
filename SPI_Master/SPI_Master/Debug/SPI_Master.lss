
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000678  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e5  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a1  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032a  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001432  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Master_Init>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
void SPI_Master_Init()
{
	DDRB = (1 << PB4)|(1 << PB5)|(1 << PB7)&~(1 << PB6);
  6c:	80 eb       	ldi	r24, 0xB0	; 176
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB = 1 << PB4;
  70:	80 e1       	ldi	r24, 0x10	; 16
  72:	88 bb       	out	0x18, r24	; 24
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPI2X)|(1 << SPR0);
  74:	81 e5       	ldi	r24, 0x51	; 81
  76:	8d b9       	out	0x0d, r24	; 13
  78:	08 95       	ret

0000007a <SPI_Write>:
	
}
void SPI_Write(char data)
{
	SPDR = data;
  7a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  7c:	77 9b       	sbis	0x0e, 7	; 14
  7e:	fe cf       	rjmp	.-4      	; 0x7c <SPI_Write+0x2>
}
  80:	08 95       	ret

00000082 <SPI_Read>:
char SPI_Read()
{
	while(!(SPSR&(1<<SPIF)));
  82:	77 9b       	sbis	0x0e, 7	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <SPI_Read>
	return SPDR;
  86:	8f b1       	in	r24, 0x0f	; 15
}
  88:	08 95       	ret

0000008a <main>:
int main(void)
{
    /* Replace with your application code */
	SPI_Master_Init();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Master_Init>
	PORTB = ~(1 << PB4);
  8e:	8f ee       	ldi	r24, 0xEF	; 239
  90:	88 bb       	out	0x18, r24	; 24
	DDRD = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	81 bb       	out	0x11, r24	; 17
    while (1) 
    {
		SPI_Write(0x32);
  96:	82 e3       	ldi	r24, 0x32	; 50
  98:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_Write>
		PORTD = SPI_Read();
  9c:	0e 94 41 00 	call	0x82	; 0x82 <SPI_Read>
  a0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	89 e6       	ldi	r24, 0x69	; 105
  a6:	98 e1       	ldi	r25, 0x18	; 24
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x1e>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x28>
  b2:	00 00       	nop
  b4:	f0 cf       	rjmp	.-32     	; 0x96 <main+0xc>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
