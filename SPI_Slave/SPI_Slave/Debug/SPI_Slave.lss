
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000672  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005da  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000327  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001407  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000144f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Slave_Init>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
void SPI_Slave_Init()
{
	DDRB = (1 << PB6)|(0x00);
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE);
  70:	8d b9       	out	0x0d, r24	; 13
  72:	08 95       	ret

00000074 <SPI_Read>:
}
char SPI_Read()
{
	while(!(SPSR & (1<<SPIF)));	
  74:	77 9b       	sbis	0x0e, 7	; 14
  76:	fe cf       	rjmp	.-4      	; 0x74 <SPI_Read>
	return SPDR;
  78:	8f b1       	in	r24, 0x0f	; 15
}
  7a:	08 95       	ret

0000007c <SPI_Write>:
void SPI_Write(char data)
{
	SPDR = data;
  7c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	
  7e:	77 9b       	sbis	0x0e, 7	; 14
  80:	fe cf       	rjmp	.-4      	; 0x7e <SPI_Write+0x2>
}
  82:	08 95       	ret

00000084 <main>:
int main(void)
{
    /* Replace with your application code */
	SPI_Slave_Init();
  84:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Slave_Init>
	DDRD = 0xff;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	81 bb       	out	0x11, r24	; 17
    while (1) 
    {
		PORTD= SPI_Read();
  8c:	0e 94 3a 00 	call	0x74	; 0x74 <SPI_Read>
  90:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	89 e6       	ldi	r24, 0x69	; 105
  96:	98 e1       	ldi	r25, 0x18	; 24
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x14>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x1e>
  a2:	00 00       	nop
		_delay_ms(1000);
		SPI_Write(0x23);
  a4:	83 e2       	ldi	r24, 0x23	; 35
  a6:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_Write>
  aa:	f0 cf       	rjmp	.-32     	; 0x8c <main+0x8>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
