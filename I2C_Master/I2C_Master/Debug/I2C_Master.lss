
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000770  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000626  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000386  00000000  00000000  00000f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000122  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Start>:
	if(status == 0x20)
		return 1;
	else
		return 2;
	
}
  6c:	84 ea       	ldi	r24, 0xA4	; 164
  6e:	86 bf       	out	0x36, r24	; 54
  70:	06 b6       	in	r0, 0x36	; 54
  72:	07 fe       	sbrs	r0, 7
  74:	fd cf       	rjmp	.-6      	; 0x70 <I2C_Start+0x4>
  76:	91 b1       	in	r25, 0x01	; 1
  78:	98 7f       	andi	r25, 0xF8	; 248
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	98 30       	cpi	r25, 0x08	; 8
  7e:	09 f0       	breq	.+2      	; 0x82 <I2C_Start+0x16>
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	08 95       	ret

00000084 <I2C_Write>:
char I2C_Write(char data)
{
	uint8_t status = 0;
	TWDR = data;
  84:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT)|(1 << TWEN);
  86:	84 e8       	ldi	r24, 0x84	; 132
  88:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1 << TWINT)));
  8a:	06 b6       	in	r0, 0x36	; 54
  8c:	07 fe       	sbrs	r0, 7
  8e:	fd cf       	rjmp	.-6      	; 0x8a <I2C_Write+0x6>
	status = TWSR&(0xF8);
  90:	81 b1       	in	r24, 0x01	; 1
  92:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x28)
  94:	88 32       	cpi	r24, 0x28	; 40
  96:	21 f0       	breq	.+8      	; 0xa0 <I2C_Write+0x1c>
		return 0;
	if(status == 0x30)
  98:	80 33       	cpi	r24, 0x30	; 48
  9a:	21 f0       	breq	.+8      	; 0xa4 <I2C_Write+0x20>
		return 1;
	return 2;
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	08 95       	ret
	TWDR = data;
	TWCR = (1 << TWINT)|(1 << TWEN);
	while(!(TWCR&(1 << TWINT)));
	status = TWSR&(0xF8);
	if(status==0x28)
		return 0;
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	08 95       	ret
	if(status == 0x30)
		return 1;
  a4:	81 e0       	ldi	r24, 0x01	; 1
	return 2;

}
  a6:	08 95       	ret

000000a8 <I2C_Stop>:
void I2C_Stop()
{
	TWCR =(1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
  a8:	84 e9       	ldi	r24, 0x94	; 148
  aa:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1 << TWSTO)));
  ac:	06 b6       	in	r0, 0x36	; 54
  ae:	04 fc       	sbrc	r0, 4
  b0:	fd cf       	rjmp	.-6      	; 0xac <I2C_Stop+0x4>
	
}
  b2:	08 95       	ret

000000b4 <main>:
#include <avr/io.h>
#include <util/delay.h>

void I2C_Init()
{
	TWBR = 32;
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	80 b9       	out	0x00, r24	; 0
    /* Replace with your application code */;
	I2C_Init();
    while (1) 
    {
			
			I2C_Start();
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Start>
			I2C_Write(0x02);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	0e 94 42 00 	call	0x84	; 0x84 <I2C_Write>
			I2C_Write('D');
  c2:	84 e4       	ldi	r24, 0x44	; 68
  c4:	0e 94 42 00 	call	0x84	; 0x84 <I2C_Write>
			I2C_Write('U');
  c8:	85 e5       	ldi	r24, 0x55	; 85
  ca:	0e 94 42 00 	call	0x84	; 0x84 <I2C_Write>
			I2C_Write('C');
  ce:	83 e4       	ldi	r24, 0x43	; 67
  d0:	0e 94 42 00 	call	0x84	; 0x84 <I2C_Write>
			I2C_Stop();
  d4:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	8e e9       	ldi	r24, 0x9E	; 158
  dc:	94 e2       	ldi	r25, 0x24	; 36
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x2a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x34>
  e8:	00 00       	nop
  ea:	e6 cf       	rjmp	.-52     	; 0xb8 <main+0x4>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
