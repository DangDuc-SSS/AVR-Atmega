
batden_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000208  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d1  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f3  00000000  00000000  00000a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000eb  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	c6 00       	.word	0x00c6	; ????
  56:	c8 00       	.word	0x00c8	; ????
  58:	ca 00       	.word	0x00ca	; ????
  5a:	cc 00       	.word	0x00cc	; ????
  5c:	ce 00       	.word	0x00ce	; ????
  5e:	d0 00       	.word	0x00d0	; ????
  60:	d2 00       	.word	0x00d2	; ????
  62:	d4 00       	.word	0x00d4	; ????
  64:	d6 00       	.word	0x00d6	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d4 e0       	ldi	r29, 0x04	; 4
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e8 e0       	ldi	r30, 0x08	; 8
  7a:	f2 e0       	ldi	r31, 0x02	; 2
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	ae 36       	cpi	r26, 0x6E	; 110
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>
  88:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  8c:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <_Z9UART_initl>:
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)


void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);/* Turn on transmission and reception */
  94:	2a b1       	in	r18, 0x0a	; 10
  96:	28 61       	ori	r18, 0x18	; 24
  98:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
  9a:	20 b5       	in	r18, 0x20	; 32
  9c:	26 68       	ori	r18, 0x86	; 134
  9e:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
  a0:	dc 01       	movw	r26, r24
  a2:	cb 01       	movw	r24, r22
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	aa 1f       	adc	r26, r26
  aa:	bb 1f       	adc	r27, r27
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	aa 1f       	adc	r26, r26
  b2:	bb 1f       	adc	r27, r27
  b4:	9c 01       	movw	r18, r24
  b6:	ad 01       	movw	r20, r26
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	44 1f       	adc	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	44 1f       	adc	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	72 e1       	ldi	r23, 0x12	; 18
  cc:	8a e7       	ldi	r24, 0x7A	; 122
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__udivmodsi4>
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	82 0f       	add	r24, r18
  d8:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
  da:	da 01       	movw	r26, r20
  dc:	c9 01       	movw	r24, r18
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	a1 09       	sbc	r26, r1
  e2:	b1 09       	sbc	r27, r1
  e4:	89 2f       	mov	r24, r25
  e6:	9a 2f       	mov	r25, r26
  e8:	ab 2f       	mov	r26, r27
  ea:	bb 27       	eor	r27, r27
  ec:	80 bd       	out	0x20, r24	; 32
  ee:	08 95       	ret

000000f0 <_Z11UART_RxCharv>:
}

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
  f0:	5f 9b       	sbis	0x0b, 7	; 11
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <_Z11UART_RxCharv>
	return(UDR);			/* Return the byte*/
  f4:	8c b1       	in	r24, 0x0c	; 12
}
  f6:	08 95       	ret

000000f8 <_Z11UART_TxCharc>:

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
  f8:	5d 9b       	sbis	0x0b, 5	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <_Z11UART_TxCharc>
	UDR = ch ;
  fc:	8c b9       	out	0x0c, r24	; 12
  fe:	08 95       	ret

00000100 <_Z15UART_SendStringPc>:
}

void UART_SendString(char *str)
{
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	fc 01       	movw	r30, r24
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
 108:	80 81       	ld	r24, Z
 10a:	88 23       	and	r24, r24
 10c:	59 f0       	breq	.+22     	; 0x124 <_Z15UART_SendStringPc+0x24>
 10e:	8f 01       	movw	r16, r30
 110:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_TxChar(str[j]);
 112:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z11UART_TxCharc>
		j++;
 116:	cf 5f       	subi	r28, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
 118:	f8 01       	movw	r30, r16
 11a:	ec 0f       	add	r30, r28
 11c:	f1 1d       	adc	r31, r1
 11e:	80 81       	ld	r24, Z
 120:	81 11       	cpse	r24, r1
 122:	f7 cf       	rjmp	.-18     	; 0x112 <_Z15UART_SendStringPc+0x12>
	{
		UART_TxChar(str[j]);
		j++;
	}
}
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <main>:

int main()
{
	char c;
	UART_init(9600);
 12c:	60 e8       	ldi	r22, 0x80	; 128
 12e:	75 e2       	ldi	r23, 0x25	; 37
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9UART_initl>
	
	UART_SendString("\n\t Echo Test ");
 138:	80 e6       	ldi	r24, 0x60	; 96
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 80 00 	call	0x100	; 0x100 <_Z15UART_SendStringPc>
	
	DDRB = 0xff;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	87 bb       	out	0x17, r24	; 23
				PORTB = (1 << PB7);
				break;
			}
		default :
			{
				PORTB = 0xff;
 144:	aa 24       	eor	r10, r10
 146:	aa 94       	dec	r10
				PORTB = (1<<PB6);
				break;
			}
		case '8':
			{
				PORTB = (1 << PB7);
 148:	68 94       	set
 14a:	bb 24       	eor	r11, r11
 14c:	b7 f8       	bld	r11, 7
				PORTB = (1<<PB5);
				break;
			}
		case '7':
			{
				PORTB = (1<<PB6);
 14e:	68 94       	set
 150:	cc 24       	eor	r12, r12
 152:	c6 f8       	bld	r12, 6
				PORTB = (1<<PB4);
				break;
			}
		case '6':
			{
				PORTB = (1<<PB5);
 154:	68 94       	set
 156:	dd 24       	eor	r13, r13
 158:	d5 f8       	bld	r13, 5
				PORTB = (1<<PB3);
				break;
			}
		case '5':
			{
				PORTB = (1<<PB4);
 15a:	68 94       	set
 15c:	ee 24       	eor	r14, r14
 15e:	e4 f8       	bld	r14, 4
				PORTB = (1<<PB2);
				break;
			}
			case '4':
			{
				PORTB = (1<<PB3);
 160:	68 94       	set
 162:	ff 24       	eor	r15, r15
 164:	f3 f8       	bld	r15, 3
				PORTB = (1<<PB1);
				break;
			}
			case '3':
			{
				PORTB = (1<<PB2);
 166:	04 e0       	ldi	r16, 0x04	; 4
				PORTB = (1<<PB0);
				break;
			}
			case '2':
			{
				PORTB = (1<<PB1);
 168:	12 e0       	ldi	r17, 0x02	; 2
				PORTB = 0x00;
				break;
			}
			case '1':
			{
				PORTB = (1<<PB0);
 16a:	d1 e0       	ldi	r29, 0x01	; 1
	UART_SendString("\n\t Echo Test ");
	
	DDRB = 0xff;
	while(1)
	{
		c=UART_RxChar();
 16c:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z11UART_RxCharv>
 170:	c8 2f       	mov	r28, r24
		UART_TxChar(c);
 172:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z11UART_TxCharc>
		switch (c)
 176:	8c 2f       	mov	r24, r28
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	fc 01       	movw	r30, r24
 17c:	f0 97       	sbiw	r30, 0x30	; 48
 17e:	e9 30       	cpi	r30, 0x09	; 9
 180:	f1 05       	cpc	r31, r1
 182:	b0 f4       	brcc	.+44     	; 0x1b0 <main+0x84>
 184:	e6 5d       	subi	r30, 0xD6	; 214
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__tablejump2__>
		{
			case '0':
			{
				PORTB = 0x00;
 18c:	18 ba       	out	0x18, r1	; 24
				break;
 18e:	ee cf       	rjmp	.-36     	; 0x16c <main+0x40>
			}
			case '1':
			{
				PORTB = (1<<PB0);
 190:	d8 bb       	out	0x18, r29	; 24
				break;
 192:	ec cf       	rjmp	.-40     	; 0x16c <main+0x40>
			}
			case '2':
			{
				PORTB = (1<<PB1);
 194:	18 bb       	out	0x18, r17	; 24
				break;
 196:	ea cf       	rjmp	.-44     	; 0x16c <main+0x40>
			}
			case '3':
			{
				PORTB = (1<<PB2);
 198:	08 bb       	out	0x18, r16	; 24
				break;
 19a:	e8 cf       	rjmp	.-48     	; 0x16c <main+0x40>
			}
			case '4':
			{
				PORTB = (1<<PB3);
 19c:	f8 ba       	out	0x18, r15	; 24
				break;
 19e:	e6 cf       	rjmp	.-52     	; 0x16c <main+0x40>
			}
		case '5':
			{
				PORTB = (1<<PB4);
 1a0:	e8 ba       	out	0x18, r14	; 24
				break;
 1a2:	e4 cf       	rjmp	.-56     	; 0x16c <main+0x40>
			}
		case '6':
			{
				PORTB = (1<<PB5);
 1a4:	d8 ba       	out	0x18, r13	; 24
				break;
 1a6:	e2 cf       	rjmp	.-60     	; 0x16c <main+0x40>
			}
		case '7':
			{
				PORTB = (1<<PB6);
 1a8:	c8 ba       	out	0x18, r12	; 24
				break;
 1aa:	e0 cf       	rjmp	.-64     	; 0x16c <main+0x40>
			}
		case '8':
			{
				PORTB = (1 << PB7);
 1ac:	b8 ba       	out	0x18, r11	; 24
				break;
 1ae:	de cf       	rjmp	.-68     	; 0x16c <main+0x40>
			}
		default :
			{
				PORTB = 0xff;
 1b0:	a8 ba       	out	0x18, r10	; 24
 1b2:	dc cf       	rjmp	.-72     	; 0x16c <main+0x40>

000001b4 <__udivmodsi4>:
 1b4:	a1 e2       	ldi	r26, 0x21	; 33
 1b6:	1a 2e       	mov	r1, r26
 1b8:	aa 1b       	sub	r26, r26
 1ba:	bb 1b       	sub	r27, r27
 1bc:	fd 01       	movw	r30, r26
 1be:	0d c0       	rjmp	.+26     	; 0x1da <__udivmodsi4_ep>

000001c0 <__udivmodsi4_loop>:
 1c0:	aa 1f       	adc	r26, r26
 1c2:	bb 1f       	adc	r27, r27
 1c4:	ee 1f       	adc	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	a2 17       	cp	r26, r18
 1ca:	b3 07       	cpc	r27, r19
 1cc:	e4 07       	cpc	r30, r20
 1ce:	f5 07       	cpc	r31, r21
 1d0:	20 f0       	brcs	.+8      	; 0x1da <__udivmodsi4_ep>
 1d2:	a2 1b       	sub	r26, r18
 1d4:	b3 0b       	sbc	r27, r19
 1d6:	e4 0b       	sbc	r30, r20
 1d8:	f5 0b       	sbc	r31, r21

000001da <__udivmodsi4_ep>:
 1da:	66 1f       	adc	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	88 1f       	adc	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	1a 94       	dec	r1
 1e4:	69 f7       	brne	.-38     	; 0x1c0 <__udivmodsi4_loop>
 1e6:	60 95       	com	r22
 1e8:	70 95       	com	r23
 1ea:	80 95       	com	r24
 1ec:	90 95       	com	r25
 1ee:	9b 01       	movw	r18, r22
 1f0:	ac 01       	movw	r20, r24
 1f2:	bd 01       	movw	r22, r26
 1f4:	cf 01       	movw	r24, r30
 1f6:	08 95       	ret

000001f8 <__tablejump2__>:
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	05 90       	lpm	r0, Z+
 1fe:	f4 91       	lpm	r31, Z
 200:	e0 2d       	mov	r30, r0
 202:	09 94       	ijmp

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
