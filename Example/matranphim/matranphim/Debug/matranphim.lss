
matranphim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000018c  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078f  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063a  00000000  00000000  00000a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c8  00000000  00000000  00001095  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000124  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  8a:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z7kiemtrav>:
unsigned char a, b, maphim;
unsigned char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
unsigned char maquet[4]={0b11111110,0b11111101,0b11111011,0b11110111};
				  
void kiemtra()
{
  92:	e0 e6       	ldi	r30, 0x60	; 96
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
	for(int i = 0; i < 4; i ++)
	{
		PORTA = maquet[i];
  98:	81 91       	ld	r24, Z+
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	45 2f       	mov	r20, r21
		{
			for (int j=4;j<8;j++)
  9e:	24 e0       	ldi	r18, 0x04	; 4
  a0:	30 e0       	ldi	r19, 0x00	; 0
			{
				if (bit_is_clear(PINA,j))
  a2:	89 b3       	in	r24, 0x19	; 25
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 2e       	mov	r0, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <_Z7kiemtrav+0x1c>
  aa:	95 95       	asr	r25
  ac:	87 95       	ror	r24
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <_Z7kiemtrav+0x18>
  b2:	80 ff       	sbrs	r24, 0
				{
					maphim=i*4+j-4;
  b4:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <__data_end>
{
	for(int i = 0; i < 4; i ++)
	{
		PORTA = maquet[i];
		{
			for (int j=4;j<8;j++)
  b8:	2f 5f       	subi	r18, 0xFF	; 255
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	4f 5f       	subi	r20, 0xFF	; 255
  be:	28 30       	cpi	r18, 0x08	; 8
  c0:	31 05       	cpc	r19, r1
  c2:	79 f7       	brne	.-34     	; 0xa2 <_Z7kiemtrav+0x10>
  c4:	5c 5f       	subi	r21, 0xFC	; 252
unsigned char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
unsigned char maquet[4]={0b11111110,0b11111101,0b11111011,0b11110111};
				  
void kiemtra()
{
	for(int i = 0; i < 4; i ++)
  c6:	50 31       	cpi	r21, 0x10	; 16
  c8:	39 f7       	brne	.-50     	; 0x98 <_Z7kiemtrav+0x6>
			//{
				//maphim= i*4+3;
			//}
		}
	}
}
  ca:	08 95       	ret

000000cc <_Z7hienthii>:

void hienthi(int maphim)
{
	a= maphim % 10;
  cc:	6a e0       	ldi	r22, 0x0A	; 10
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	0e 94 9c 00 	call	0x138	; 0x138 <__divmodhi4>
  d4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <a>
	b= maphim / 10;
  d8:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <b>
	PORTC= (1<<PINC6);
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	85 bb       	out	0x15, r24	; 21
	PORTB= number[b];
  e0:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <b>
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ec 59       	subi	r30, 0x9C	; 156
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	80 81       	ld	r24, Z
  ec:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9f e1       	ldi	r25, 0x1F	; 31
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <_Z7hienthii+0x26>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_Z7hienthii+0x2c>
  f8:	00 00       	nop
	_delay_ms(2);
	PORTC= 0x00;
  fa:	15 ba       	out	0x15, r1	; 21
	
	PORTC= (1<<PINC7);
  fc:	80 e8       	ldi	r24, 0x80	; 128
  fe:	85 bb       	out	0x15, r24	; 21
	PORTB= number[a];
 100:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <a>
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	ec 59       	subi	r30, 0x9C	; 156
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	80 81       	ld	r24, Z
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9f e1       	ldi	r25, 0x1F	; 31
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <_Z7hienthii+0x46>
 116:	00 c0       	rjmp	.+0      	; 0x118 <_Z7hienthii+0x4c>
 118:	00 00       	nop
	_delay_ms(2);
	PORTC= 0x00;
 11a:	15 ba       	out	0x15, r1	; 21
 11c:	08 95       	ret

0000011e <main>:
}
int main(void)
{
	/* Replace with your application code */
	DDRA= 0x0f;
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
 126:	84 bb       	out	0x14, r24	; 20
	while (1)
	{
		kiemtra();
 128:	0e 94 49 00 	call	0x92	; 0x92 <_Z7kiemtrav>
		hienthi(maphim);
 12c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 66 00 	call	0xcc	; 0xcc <_Z7hienthii>
 136:	f8 cf       	rjmp	.-16     	; 0x128 <main+0xa>

00000138 <__divmodhi4>:
 138:	97 fb       	bst	r25, 7
 13a:	07 2e       	mov	r0, r23
 13c:	16 f4       	brtc	.+4      	; 0x142 <__divmodhi4+0xa>
 13e:	00 94       	com	r0
 140:	07 d0       	rcall	.+14     	; 0x150 <__divmodhi4_neg1>
 142:	77 fd       	sbrc	r23, 7
 144:	09 d0       	rcall	.+18     	; 0x158 <__divmodhi4_neg2>
 146:	0e 94 b0 00 	call	0x160	; 0x160 <__udivmodhi4>
 14a:	07 fc       	sbrc	r0, 7
 14c:	05 d0       	rcall	.+10     	; 0x158 <__divmodhi4_neg2>
 14e:	3e f4       	brtc	.+14     	; 0x15e <__divmodhi4_exit>

00000150 <__divmodhi4_neg1>:
 150:	90 95       	com	r25
 152:	81 95       	neg	r24
 154:	9f 4f       	sbci	r25, 0xFF	; 255
 156:	08 95       	ret

00000158 <__divmodhi4_neg2>:
 158:	70 95       	com	r23
 15a:	61 95       	neg	r22
 15c:	7f 4f       	sbci	r23, 0xFF	; 255

0000015e <__divmodhi4_exit>:
 15e:	08 95       	ret

00000160 <__udivmodhi4>:
 160:	aa 1b       	sub	r26, r26
 162:	bb 1b       	sub	r27, r27
 164:	51 e1       	ldi	r21, 0x11	; 17
 166:	07 c0       	rjmp	.+14     	; 0x176 <__udivmodhi4_ep>

00000168 <__udivmodhi4_loop>:
 168:	aa 1f       	adc	r26, r26
 16a:	bb 1f       	adc	r27, r27
 16c:	a6 17       	cp	r26, r22
 16e:	b7 07       	cpc	r27, r23
 170:	10 f0       	brcs	.+4      	; 0x176 <__udivmodhi4_ep>
 172:	a6 1b       	sub	r26, r22
 174:	b7 0b       	sbc	r27, r23

00000176 <__udivmodhi4_ep>:
 176:	88 1f       	adc	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	5a 95       	dec	r21
 17c:	a9 f7       	brne	.-22     	; 0x168 <__udivmodhi4_loop>
 17e:	80 95       	com	r24
 180:	90 95       	com	r25
 182:	bc 01       	movw	r22, r24
 184:	cd 01       	movw	r24, r26
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
